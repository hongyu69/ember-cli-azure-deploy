#! /usr/bin/env node

var exec = require('child_process').exec,
    fs = require('fs'),
    path = require('path'),
    chalk = require('chalk'),
    args = process.argv,
    currentFolder = process.cwd();

// Check for -v
if (args && args[2] && args[2] === '-v') {
    var package = require('../package.json');

    if (package && package.version) {
        return console.log(package.version);
    } else {
        console.log('ember-cli-azure-deploy package.json missing, please reinstall!');
    }
}

// Check for commands
if (args && args[2] && (args[2] === 'init' || args[2] === 'build')) {
    if (args[2] === 'init') {
        // Copy deploy.sh to project's root
        copyFile(path.resolve(__dirname, '.deployment'), path.resolve(currentFolder + '/.deployment'));
        copyFile(path.resolve(__dirname, 'deploy.sh'), path.resolve(currentFolder + '/deploy.sh'));
    } else if (args[2] === 'build') {
		
		if(args[3] && (args[3] === 'test' || args[3] === 'production')) {		
			var execPath = path.resolve('node_modules', 'ember-cli', 'bin'),
				cp, captureOutput;

			console.log('Executing "ember build -e ' + args[3] + '" . This might take a while.');

			cp = exec('node ' + execPath + '\\ember build -e ' + args[3], {
				cwd: currentFolder,
				stdout: true,
				stdin: false
			}, function (err, stdout, stderr) {
				if (err) {
					return console.error(err);
				}
				console.log(stdout, stderr);
			}.bind(this));

			captureOutput = function (child, output) {
				child.on('data', function (data) {
					output.write(chalk.stripColor(data));
				});
			};

			captureOutput(cp.stdout, process.stdout);
			captureOutput(cp.stderr, process.stderr);
		} else {
			console.error('Invalid ember CLI build argument ' + args[3]);
		}
    }
} else {
    console.error('No parameter given! Usage deploy [init|build]');
}

// Helper Functions
function copyFile(source, target) {
    var rd, wr;

    rd = fs.createReadStream(source);
    rd.on('error', done);

    wr = fs.createWriteStream(target);
    wr.on('error', done);
    wr.on('close', function (ex) {
        done();
    });
    rd.pipe(wr);

    function done (err) {
        if (err) {
            console.log(err);
        }
    }
}